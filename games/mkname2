#!/usr/bin/perl -w

# If you don't have any of these, you should run "cpan Bundle::CPAN"
use Getopt::Long;
use Pod::Usage;
use strict;
BEGIN{
  # Try to find the best way to generate random numbers.
  # Start with the Math::TrulyRandom module:
  eval "use Math::TrulyRandom";
  if ($@) {
    foreach my $file (qw(/dev/urandom /dev/random)) {
      if (-r $file) {
	no  strict;
	*truly_random_value = sub {
	  local *F;
	  open F, "<$file" or die "$file: $!";
	  my $b;
	  sysread(F,$b,4)==4 or die "$file: $!";
	  close F;
	  return unpack("I",$b);
	};
	last;
      }
    }
    # Otherwise, we lose
    if (!defined \&truly_random_value) {
      die "No Math::TrulyRandom and no /dev/(u)random\n$@";
    }
  }
}

binmode(STDOUT,":utf8");

srand(truly_random_value());
sub mkrand($);
sub uniq(@);

our $verbose = 0;
our $debug = 0;
our $quiet = 0;
our $wordlist_file = undef;
our $wordcount = 0;
our %wordhash;
our %parts;
our %revparts;
our $minlen = 4;
our $maxlen = 7;
our $max_retries = 200;
our $count = 1;

$|=1;

Getopt::Long::Configure('auto_abbrev','bundling');
GetOptions(
	   'h|?|help' => sub {pod2usage(-verbose => 0)},
	   'man' => sub {pod2usage(-verbose => 2)},
	   'v|verbose' => sub {$::verbose=1;$::quiet=0},
	   'd|debug' => sub {$::verbose=1;$::debug=1;$::quiet=0},
	   'q|quiet' => sub {$::verbose=0;$::debug=0;$::quiet=1},
	   'w|wordlist=s' => \$wordlist_file,
	   'n|number=i' => \$count,
	   'M|max-length=i' => \$maxlen,
	   'm|min-length=i' => \$minlen
	  ) or pod2usage(-verbose => 0);

getwords();
our @words;

my %seen;
for(my $i=0;$i<$count;$i++) {
        my $len = int(mkrand($maxlen-$minlen+1)) + $minlen;
        my $pw = pseudo_word($len);
        redo if $seen{$pw}++;
        print pseudo_word($len), "\n";
}
exit 0;

#######################

sub getwords {
  my $i;
    $wordlist_file =
      (defined($wordlist_file) and -f $wordlist_file and $wordlist_file) ||
	(-f "/usr/dict/words" and "/usr/dict/words") ||
	  (-f "/usr/share/dict/words" and "/usr/share/dict/words");
    my @wordlist;
    local *P;
    # Read each word
    open(P,"<:utf8",$wordlist_file) or die "Cannot open $wordlist_file: $!";
    while(<P>) {
        chomp;
        next unless length >= $minlen;
	$wordhash{$_}++;
        # Score each part of each word
	$parts{start}{substr($_,0,3)}++;
	for(my $i=1;$i<=length($_)-4;$i++) {
		$parts{mid}{substr($_,$i,2)}{substr($_,$i+2,1)}++;
                $parts{last2}{substr($_,$i,2)}++;
	}
	my $end = substr($_,-3);
	$parts{end}{substr($end,0,2)}{substr($end,-1)}++ if length($_) > 3;
        $parts{last2end}{substr($end,0,2)}++;
    }
    close P;
    # Give a bonus to each part based on how often the last two
    # letters start a new three-letter set.
    foreach my $mid (keys %{$parts{mid}}) {
        my $first = substr($mid,1,1);
        foreach my $last (keys %{$parts{mid}{$mid}}) {
                $parts{midend}{$mid}{$last} = $parts{mid}{$mid}{$last};
                $parts{midend}{$mid}{$last} += $parts{last2end}{$first.$last}
                        if exists $parts{last2end}{$first.$last};
                $parts{mid}{$mid}{$last} += $parts{last2}{$first.$last}
                        if exists $parts{last2}{$first.$last};
        }
    }
    delete $parts{last2};
    delete $parts{last2end};
    $parts{start} = [sort {$parts{start}{$a}<=>$parts{start}{$b}}
    		keys %{$parts{start}}];
    my $pm = $parts{mid};
    my $pme = $parts{midend};
    foreach my $mid (keys %$pm) {
    	my $x = $pm->{$mid};
    	$pm->{$mid} = [sort {$x->{$a}<=>$x->{$b}} keys %$x];
        $x = $pme->{$mid};
        $pme->{$mid} = [sort {$x->{$a}<=>$x->{$b}} keys %$x];
    }
    my $pe = $parts{end};
    foreach my $end (keys %$pe) {
    	my $x = $pe->{$end};
    	$pe->{$end} = [sort {$x->{$a}<=>$x->{$b}} keys %$x];
    }
}

# Take a length. Return a pseudo-word of the given length.
sub pseudo_word {
  my $n = shift;
  my $chunk;
  die "Cannot make pseudo-word less than 2 chars\n" if $n < 2;
  WORD_GEN: until($chunk && !is_word($chunk)) {
    $chunk = '';
    my $nn=$n;
    print "\tNew word len=$nn\n" if $verbose;
    while($nn) {
      my $p;
      if (length $chunk) {
      	my $last = substr($chunk,-2);
        if ($nn == 1) {
          $p = $parts{end}{$last};
        } elsif ($nn == 2) {
          $p = $parts{midend}{$last};
        } else {
          $p = $parts{mid}{$last};
        }
	unless ($p) {
		print "\tDead end at '$last'\n" if $verbose;
		$chunk = '';
		next WORD_GEN;
	}
      } else {
      	$p = $parts{start};
      }
      my $i = int sqrt(@$p * mkrand(scalar @$p));
      print "Random index: $i out of ", scalar(@$p), "\n" if $debug;
      die "Undefined index $i" unless exists $p->[$i];
      my $piece = $p->[$i];
      $chunk .= $piece;
      $nn -= length($piece);
      print "\t\tAdded piece $piece, $nn left\n" if $verbose;
    }
    my $clen = length($chunk);
  }
  return $chunk;
}

sub is_word {
  my $string = shift @_;
  return exists($wordhash{$string}) || exists($wordhash{lc $string});
}

sub mkrand($) {
  my $range = shift;
  if (defined $range) {
    return rand $range;
  } else {
    return rand;
  }
}

__END__

=head1 NAME

mkname - A tool for the pseudo-random generation of name-like strings.

=head1 SYNOPSIS

  mkname [-dhqv] [-w|--wordlist FILE] [-n|--number N]
        [-m|--min-length <len>] [-M|--max-length <len>]

  options:

	   -h|-?|--help		Print summary help
	   --man		Show manual
	   -v|--verbose		Verbose output
	   -d|--debug		Debugging mode
	   -q|--quiet		Suppress excess output
	   -w|--wordlist FILE	Use FILE as a basis for name generation
                                FILE should contain 1,000-30,000 names,
                                repetition is allowed, and will influence
                                the outcome (making certain word-parts
                                more common).
	   -n|--number N	Produce N names
           -m|--min-length N    Produce names at least this long (4)
           -M|--max-length N    Produce names no longer than this (7)

=head1 DESCRIPTION

This program generates a random name which sounds somewhat like a base
list of names. It can be used for first or last names, male or female
based solely on the input name list (C<-w> option).

To run mkname, you should get the TrulyRandom package, which can be
found on any CPAN site (see www.perl.com).

=head1 ALGORITHM

Name generation is done through a heuristic that selects letter groups based
on their frequency in the given word list. The length I<must> be
2 or more. The resulting word is likely to sound like the input
words, so for the case of name generation, the result should
have whatever regional, gender or language influences that the
input list did, but will not be one of the input names.

=head1 OPTIONS

=over 5

=item C<-d>

Turn on debugging output. Intended for development purposes only.

=item C<-n>

Give a number of names that you wish to generate.

=item C<-w>

X<--wordlist>
Give the full path to the word list to be used. This list should consist
of single words, on to a line.

=item C<-m>

X<--min-length>
Give the shortest length name to be generated. Defaults to 4.

=item C<-M>

X<--max-length>
Give the longest length name to be generated. Defaults to 7.

=back

=head1 AUTHOR

Originally based on mkpasswd by Aaron Sherman:

Aaron Sherman (c) 1999,2005 and distributed under the terms of the GNU
General Public License (see www.gnu.org) or, at the user's choice,
the same terms as Perl itself (see www.perl.org).

=cut

/*
 * -*-perl-*-
 * Local variables:
 * cperl-indent-level: 2
 * End:
 *
 * vim: expandtab shiftwidth=2:
*/
