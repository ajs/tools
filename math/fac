#!/usr/bin/env perl6
#
# A command-line factorization program based on BigInt and BigFloat.
#
# This is the slow, dumb way of doing it, but it gets the job done in
# finite time for all cases that you have sufficient VM for.
#
# Written in Perl 5 in 1999,2000 (c) by Aaron Sherman <ajs@ajs.com>
# Updated to Perl 6 in 2019 (c) by Aaron Sherman <ajs@ajs.com>
#
# Distributed under the Artistic License 2.0 which you should have
# received with your copy of Perl.

# Pull in the Perl 5 ntheory module's "factor"
use Inline::Perl5;
our $p5 = Inline::Perl5.new();
$p5.use('ntheory');

our &factor = $p5.run(q{
    sub factor {
        my $n = shift @_;
        ntheory::factor($n);
    }
    \&factor;
});

sub MAIN(*@numbers, Bool :$test) {
    for @numbers -> $number {
        # Force passing $number as a string so that ntheory can instantiate
        # a Perl 5 Math::BigInt with it.
        my @factors = factor(~$number).sort;
        if $test {
            my $product = [*] @factors;
            die "fac($number) != {@factors.join('*')} = $product"
                unless $product == +$number;
        }
        say @factors.join(' ');
    }
}
